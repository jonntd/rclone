# 123网盘Backend标准化测试配置文件
# 版本: 1.0
# 说明: 此文件包含测试脚本的所有可配置参数

# =============================================================================
# 文件大小配置 (单位: MB)
# =============================================================================

# 小文件配置 - 用于测试单步上传API
SMALL_FILE_SIZE=10

# 中等文件配置 - 用于测试单步上传API边界
MEDIUM_FILE_SIZE=100

# 大文件配置 - 用于测试单步上传API上限
LARGE_FILE_SIZE=500

# 超大文件配置 - 用于测试分片上传API
HUGE_FILE_SIZE=1200

# =============================================================================
# 测试行为配置
# =============================================================================

# 测试目录配置
TEST_BASE_DIR="123_standard_test"

# 统一测试目录（所有测试文件上传到此目录）
UNIFIED_TEST_DIR="123_test_unified"

# 是否清理远程统一目录
CLEAN_REMOTE=false

# 详细程度: quiet, normal, verbose
VERBOSE_LEVEL="normal"

# 是否保留测试文件: true, false
KEEP_FILES=false

# 并发传输数量
CONCURRENT_TRANSFERS=1

# 测试超时时间 (秒)
TEST_TIMEOUT=1800

# =============================================================================
# 高级配置
# =============================================================================

# 是否启用性能监控
ENABLE_PERFORMANCE_MONITORING=true

# 是否生成详细报告
GENERATE_DETAILED_REPORT=true

# 是否测试错误恢复
TEST_ERROR_RECOVERY=false

# 是否测试断点续传
TEST_RESUME_UPLOAD=false

# =============================================================================
# 特定测试场景配置
# =============================================================================

# 测试.partial机制
TEST_PARTIAL_MECHANISM=true

# 测试重命名API
TEST_RENAME_API=true

# 测试单步上传策略
TEST_SINGLE_STEP_STRATEGY=true

# 测试分片上传策略
TEST_CHUNKED_STRATEGY=true

# 测试回收站问题
TEST_RECYCLE_BIN_ISSUE=true

# =============================================================================
# 网络和性能配置
# =============================================================================

# 网络超时配置 (秒)
NETWORK_TIMEOUT=300

# 重试次数
MAX_RETRIES=3

# 重试间隔 (秒)
RETRY_INTERVAL=5

# =============================================================================
# 日志和报告配置
# =============================================================================

# 日志级别: DEBUG, INFO, WARN, ERROR
LOG_LEVEL="INFO"

# 是否保留历史日志
KEEP_HISTORICAL_LOGS=true

# 历史日志保留天数
LOG_RETENTION_DAYS=7

# 报告格式: text, json, html
REPORT_FORMAT="text"

# =============================================================================
# 预设配置模板
# =============================================================================

# 快速测试预设
if [ "$TEST_MODE" = "quick" ]; then
    SMALL_FILE_SIZE=5
    MEDIUM_FILE_SIZE=0    # 跳过
    LARGE_FILE_SIZE=0     # 跳过
    HUGE_FILE_SIZE=0      # 跳过
    VERBOSE_LEVEL="quiet"
    GENERATE_DETAILED_REPORT=false
fi

# 性能测试预设
if [ "$TEST_MODE" = "performance" ]; then
    SMALL_FILE_SIZE=50
    MEDIUM_FILE_SIZE=100
    LARGE_FILE_SIZE=200
    HUGE_FILE_SIZE=500
    CONCURRENT_TRANSFERS=4
    ENABLE_PERFORMANCE_MONITORING=true
    VERBOSE_LEVEL="verbose"
fi

# 压力测试预设
if [ "$TEST_MODE" = "stress" ]; then
    SMALL_FILE_SIZE=100
    MEDIUM_FILE_SIZE=500
    LARGE_FILE_SIZE=1000
    HUGE_FILE_SIZE=2000
    CONCURRENT_TRANSFERS=8
    TEST_TIMEOUT=3600
    MAX_RETRIES=5
fi

# 开发测试预设
if [ "$TEST_MODE" = "development" ]; then
    SMALL_FILE_SIZE=1
    MEDIUM_FILE_SIZE=10
    LARGE_FILE_SIZE=50
    HUGE_FILE_SIZE=100
    VERBOSE_LEVEL="verbose"
    KEEP_FILES=true
    GENERATE_DETAILED_REPORT=true
    TEST_ERROR_RECOVERY=true
fi

# =============================================================================
# 环境特定配置
# =============================================================================

# 检测操作系统并调整配置
case "$(uname -s)" in
    Darwin*)
        # macOS特定配置
        CONCURRENT_TRANSFERS=2
        ;;
    Linux*)
        # Linux特定配置
        CONCURRENT_TRANSFERS=4
        ;;
    CYGWIN*|MINGW*)
        # Windows特定配置
        CONCURRENT_TRANSFERS=1
        ;;
esac

# 检测可用内存并调整文件大小
AVAILABLE_MEMORY_GB=$(free -g 2>/dev/null | awk '/^Mem:/{print $7}' 2>/dev/null || echo "4")
if [ -n "$AVAILABLE_MEMORY_GB" ] && [ "$AVAILABLE_MEMORY_GB" -lt 2 ] 2>/dev/null; then
    # 低内存环境，减小测试文件大小
    LARGE_FILE_SIZE=200
    HUGE_FILE_SIZE=500
fi

# =============================================================================
# 验证配置
# =============================================================================

# 验证文件大小配置
validate_config() {
    if [ "$SMALL_FILE_SIZE" -gt 1000 ]; then
        echo "警告: 小文件大小过大 ($SMALL_FILE_SIZE MB)"
    fi
    
    if [ "$HUGE_FILE_SIZE" -gt 5000 ]; then
        echo "警告: 超大文件大小过大 ($HUGE_FILE_SIZE MB)"
    fi
    
    if [ "$CONCURRENT_TRANSFERS" -gt 10 ]; then
        echo "警告: 并发传输数过高 ($CONCURRENT_TRANSFERS)"
    fi
}

# 显示当前配置
show_config() {
    echo "当前测试配置:"
    echo "  小文件: ${SMALL_FILE_SIZE}MB"
    echo "  中等文件: ${MEDIUM_FILE_SIZE}MB"
    echo "  大文件: ${LARGE_FILE_SIZE}MB"
    echo "  超大文件: ${HUGE_FILE_SIZE}MB"
    echo "  并发数: ${CONCURRENT_TRANSFERS}"
    echo "  详细程度: ${VERBOSE_LEVEL}"
    echo "  保留文件: ${KEEP_FILES}"
}

# =============================================================================
# 统一目录功能说明
# =============================================================================

# 统一目录功能：
# - 所有测试文件上传到同一个目录（UNIFIED_TEST_DIR）
# - 便于管理和查看测试结果
# - 文件名包含大小信息，如：test_123_small_10MB.bin
# - 支持累积测试结果，便于对比分析
#
# 查看统一目录中的文件：
# ./rclone_test ls 123:123_test_unified/
#
# 手动清理统一目录：
# ./rclone_test delete 123:123_test_unified/
#
# 或设置 CLEAN_REMOTE=true 自动清理

# =============================================================================
# 使用说明
# =============================================================================

# 在测试脚本中使用此配置文件:
# source test_123_config.conf
#
# 或者通过环境变量覆盖特定配置:
# TEST_MODE=quick source test_123_config.conf
# SMALL_FILE_SIZE=20 ./test_123_standard.sh
# UNIFIED_TEST_DIR=my_test ./test_123_standard.sh
# CLEAN_REMOTE=true ./test_123_standard.sh
#
# 或者创建自定义配置文件:
# cp test_123_config.conf my_test_config.conf
# # 编辑 my_test_config.conf
# source my_test_config.conf && ./test_123_standard.sh
